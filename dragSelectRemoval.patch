diff --git a/templates/vue/package.json b/templates/vue/package.json
index efef9751..8a14f864 100644
--- a/templates/vue/package.json
+++ b/templates/vue/package.json
@@ -21,7 +21,6 @@
     "bootstrap": "^4.3.1",
     "bootstrap-vue": "^2.13.1",
     "d3": "^5.16.0",
-    "dragselect": "^1.13.1",
     "moment": "^2.25.3",
     "moment-timezone": "^0.5.28",
     "tiptap": "^1.29.1",
diff --git a/templates/vue/src/components/TapestryApp.vue b/templates/vue/src/components/TapestryApp.vue
index e1a77df8..56eeb387 100644
--- a/templates/vue/src/components/TapestryApp.vue
+++ b/templates/vue/src/components/TapestryApp.vue
@@ -49,7 +49,7 @@
 </template>
 
 <script>
-import DragSelect from "dragselect"
+// import DragSelect from "dragselect"
 import { mapMutations, mapState } from "vuex"
 import Loading from "@/components/Loading"
 import TapestryNode from "@/components/TapestryNode"
@@ -117,7 +117,7 @@ export default {
     Promise.all(data).then(([dataset, progress]) => {
       this.init({ dataset, progress })
       this.loading = false
-      this.$nextTick(this.initializeDragSelect)
+      // this.$nextTick(this.initializeDragSelect)
     })
   },
   beforeDestroy() {
@@ -136,26 +136,26 @@ export default {
     addRootNode() {
       this.$root.$emit("add-node", null)
     },
-    initializeDragSelect() {
-      document.addEventListener("keydown", evt => {
-        if (evt.key === "Escape") {
-          this.clearSelection()
-        }
-      })
+    // initializeDragSelect() {
+    //   document.addEventListener("keydown", evt => {
+    //     if (evt.key === "Escape") {
+    //       this.clearSelection()
+    //     }
+    //   })
 
-      new DragSelect({
-        selectables: document.querySelectorAll(".node"),
-        area: this.$refs.app,
-        onDragStart: evt => {
-          if (evt.ctrlKey || evt.metaKey || evt.shiftKey) {
-            return
-          }
-          this.clearSelection()
-        },
-        onElementSelect: el => this.select(el.dataset.id),
-        onElementUnselect: el => this.unselect(el.dataset.id),
-      })
-    },
+    //   new DragSelect({
+    //     selectables: document.querySelectorAll(".node"),
+    //     area: this.$refs.app,
+    //     onDragStart: evt => {
+    //       if (evt.ctrlKey || evt.metaKey || evt.shiftKey) {
+    //         return
+    //       }
+    //       this.clearSelection()
+    //     },
+    //     onElementSelect: el => this.select(el.dataset.id),
+    //     onElementUnselect: el => this.unselect(el.dataset.id),
+    //   })
+    // },
     updateViewBox() {
       const MAX_RADIUS = 240
       const MIN_TAPESTRY_WIDTH_FACTOR = 1.5
